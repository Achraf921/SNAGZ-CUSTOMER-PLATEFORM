{"version":3,"file":"static/js/428.df05dd28.chunk.js","mappings":"qJAGO,MAAMA,EAAmBA,KAC9BC,QAAQC,IAAI,2DAGa,CACvB,WAAY,SAAU,QAAS,WAAY,YAC3C,0BAA2B,gBAGZC,QAAQC,IACnBC,aAAaC,QAAQF,KACvBH,QAAQC,IAAI,6CAA8BE,KAC1CC,aAAaE,WAAWH,MAKD,CACzB,WAAY,SAAU,QAAS,WAAY,YAC3C,0BAA2B,gBAGVD,QAAQC,IACrBI,eAAeF,QAAQF,KACzBH,QAAQC,IAAI,+CAAgCE,KAC5CI,eAAeD,WAAWH,MAI9BH,QAAQC,IAAI,qDAwEDO,EAAuBC,IAIlC,GAHAT,QAAQC,IAAI,sDAGPQ,EAASC,MAAQD,EAASE,MAE7B,MADAX,QAAQY,MAAM,4EACR,IAAIC,MAAM,8CAIlBd,IAGA,MAAMe,EAAoB,CACxBJ,IAAKD,EAASC,IACdC,MAAOF,EAASE,MAChBI,SAAUN,EAASM,SACnBC,KAAMP,EAASO,MAAQ,GACvBC,OAAQR,EAASC,IACjBQ,WAAW,IAAIC,MAAOC,eAGxBpB,QAAQC,IAAI,sDAA6C,CACvDS,IAAKI,EAAkBJ,IACvBC,MAAOG,EAAkBH,MACzBI,SAAUD,EAAkBC,WAG9BX,aAAaiB,QAAQ,WAAYC,KAAKC,UAAUT,IAChDP,eAAec,QAAQ,WAAYC,KAAKC,UAAUT,IAClDV,aAAaiB,QAAQ,SAAUP,EAAkBJ,KACjDH,eAAec,QAAQ,SAAUP,EAAkBJ,KAEnDV,QAAQC,IAAI,8C","sources":["utils/authSecurity.js"],"sourcesContent":["// Frontend security utilities to prevent privacy leaks and session contamination\n\n// Clear all authentication data completely\nexport const clearAllAuthData = () => {\n  console.log('🧹 SECURITY: Clearing all authentication data');\n  \n  // Clear localStorage\n  const localStorageKeys = [\n    'userInfo', 'userId', 'token', 'userRole', 'userEmail',\n    'hasCompletedWelcomeForm', 'isFirstLogin'\n  ];\n  \n  localStorageKeys.forEach(key => {\n    if (localStorage.getItem(key)) {\n      console.log(`🗑️ Clearing localStorage: ${key}`);\n      localStorage.removeItem(key);\n    }\n  });\n  \n  // Clear sessionStorage\n  const sessionStorageKeys = [\n    'userInfo', 'userId', 'token', 'userRole', 'userEmail',\n    'hasCompletedWelcomeForm', 'isFirstLogin'\n  ];\n  \n  sessionStorageKeys.forEach(key => {\n    if (sessionStorage.getItem(key)) {\n      console.log(`🗑️ Clearing sessionStorage: ${key}`);\n      sessionStorage.removeItem(key);\n    }\n  });\n  \n  console.log('✅ SECURITY: All authentication data cleared');\n};\n\n// Validate stored user data integrity\nexport const validateStoredUserData = () => {\n  console.log('🔒 SECURITY: Validating stored user data');\n  \n  try {\n    // Check localStorage userInfo\n    const localUserInfo = localStorage.getItem('userInfo');\n    const sessionUserInfo = sessionStorage.getItem('userInfo');\n    \n    let parsedLocalUserInfo = null;\n    let parsedSessionUserInfo = null;\n    \n    if (localUserInfo) {\n      try {\n        parsedLocalUserInfo = JSON.parse(localUserInfo);\n      } catch (error) {\n        console.error('🚨 SECURITY: Corrupted localStorage userInfo, clearing...');\n        localStorage.removeItem('userInfo');\n      }\n    }\n    \n    if (sessionUserInfo) {\n      try {\n        parsedSessionUserInfo = JSON.parse(sessionUserInfo);\n      } catch (error) {\n        console.error('🚨 SECURITY: Corrupted sessionStorage userInfo, clearing...');\n        sessionStorage.removeItem('userInfo');\n      }\n    }\n    \n    // Validate required fields\n    if (parsedLocalUserInfo) {\n      if (!parsedLocalUserInfo.sub || !parsedLocalUserInfo.email) {\n        console.error('🚨 SECURITY: Invalid userInfo in localStorage (missing sub/email), clearing...');\n        clearAllAuthData();\n        return false;\n      }\n    }\n    \n    if (parsedSessionUserInfo) {\n      if (!parsedSessionUserInfo.sub || !parsedSessionUserInfo.email) {\n        console.error('🚨 SECURITY: Invalid userInfo in sessionStorage (missing sub/email), clearing...');\n        clearAllAuthData();\n        return false;\n      }\n    }\n    \n    // Check for consistency between localStorage and sessionStorage\n    if (parsedLocalUserInfo && parsedSessionUserInfo) {\n      if (parsedLocalUserInfo.sub !== parsedSessionUserInfo.sub) {\n        console.error('🚨 SECURITY: User data mismatch between localStorage and sessionStorage!');\n        console.error('localStorage sub:', parsedLocalUserInfo.sub);\n        console.error('sessionStorage sub:', parsedSessionUserInfo.sub);\n        clearAllAuthData();\n        return false;\n      }\n    }\n    \n    console.log('✅ SECURITY: Stored user data validation passed');\n    return true;\n    \n  } catch (error) {\n    console.error('🚨 SECURITY: Error validating stored data:', error);\n    clearAllAuthData();\n    return false;\n  }\n};\n\n// Secure user data storage with validation\nexport const secureStoreUserData = (userInfo) => {\n  console.log('🔒 SECURITY: Securely storing user data');\n  \n  // Validate required fields\n  if (!userInfo.sub || !userInfo.email) {\n    console.error('🚨 SECURITY: Cannot store invalid userInfo (missing sub/email)');\n    throw new Error('Invalid user data: missing required fields');\n  }\n  \n  // Clear any existing data first\n  clearAllAuthData();\n  \n  // Store validated data\n  const sanitizedUserInfo = {\n    sub: userInfo.sub,\n    email: userInfo.email,\n    username: userInfo.username,\n    name: userInfo.name || '',\n    userId: userInfo.sub, // Always use sub as userId\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log('💾 SECURITY: Storing sanitized user data:', {\n    sub: sanitizedUserInfo.sub,\n    email: sanitizedUserInfo.email,\n    username: sanitizedUserInfo.username\n  });\n  \n  localStorage.setItem('userInfo', JSON.stringify(sanitizedUserInfo));\n  sessionStorage.setItem('userInfo', JSON.stringify(sanitizedUserInfo));\n  localStorage.setItem('userId', sanitizedUserInfo.sub);\n  sessionStorage.setItem('userId', sanitizedUserInfo.sub);\n  \n  console.log('✅ SECURITY: User data stored securely');\n};\n\n// Get validated user data\nexport const getValidatedUserData = () => {\n  if (!validateStoredUserData()) {\n    return null;\n  }\n  \n  try {\n    const userInfoStr = sessionStorage.getItem('userInfo') || localStorage.getItem('userInfo');\n    if (userInfoStr) {\n      const userInfo = JSON.parse(userInfoStr);\n      \n      console.log('📖 SECURITY: Retrieved validated user data:', {\n        sub: userInfo.sub,\n        email: userInfo.email,\n        hasUserId: !!userInfo.userId\n      });\n      \n      return userInfo;\n    }\n  } catch (error) {\n    console.error('🚨 SECURITY: Error retrieving user data:', error);\n    clearAllAuthData();\n  }\n  \n  return null;\n};\n\n// Security check before making API calls\nexport const validateApiRequest = (userId) => {\n  const userData = getValidatedUserData();\n  \n  if (!userData) {\n    console.error('🚨 SECURITY: No valid user data for API request');\n    return false;\n  }\n  \n  if (userData.sub !== userId && userData.userId !== userId) {\n    console.error('🚨 SECURITY: API request userId mismatch!');\n    console.error('Stored userId:', userData.sub);\n    console.error('Request userId:', userId);\n    clearAllAuthData();\n    return false;\n  }\n  \n  console.log('✅ SECURITY: API request validation passed');\n  return true;\n}; "],"names":["clearAllAuthData","console","log","forEach","key","localStorage","getItem","removeItem","sessionStorage","secureStoreUserData","userInfo","sub","email","error","Error","sanitizedUserInfo","username","name","userId","timestamp","Date","toISOString","setItem","JSON","stringify"],"sourceRoot":""}